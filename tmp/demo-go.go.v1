package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
)

const (
	YY_END_OF_BUFFER_CHAR = 0
	YY_BUF_SIZE           = 32768
	INITIAL               = 0
)

type yy_buffer_state struct {
	yy_file   *os.File
	yy_reader *bufio.Reader

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	yy_at_bol bool

	yy_bs_lineno int /**< The line count. */
	yy_bs_column int /**< The column count. */
}

var (
	yytext              string
	yy_init             = false
	yyin, yyout         *os.File
	yy_start            = 0
	yy_buffer_stack     []*yy_buffer_state
	yy_buffer_stack_top int = -1
)

func yy_init_buffer(b *yy_buffer_state, file *os.File) {
	if yy_buffer_stack_top < 0 || b != yy_buffer_stack[yy_buffer_stack_top] {
		yy_at_bol = true
		b.yy_bs_lineno = 1
		b.yy_bs_column = 0
	}
}

func yy_create_buffer(file *os.File, size int) *yy_buffer_state {
	b := yy_buffer_state{
		yy_file:   file,
		yy_reader: bufio.NewReaderSize(file, size),
	}
	yy_init_buffer(&b, file)
	return &b
}

func YY_STATE_EOF(state int) int {
	return YY_END_OF_BUFFER + state + 1
}

func yylex() {
	if !yy_init {
		yy_init = true

		// #ifdef YY_USER_INIT
		// YY_USER_INIT
		// #endif

		if yy_start == 0 {
			yy_start = 1 /* first start state */
		}

		if yyin == nil {
			yyin = os.Stdin
		}

		if yyout == nil {
			yyout = os.Stdout
		}

		if yy_buffer_stack == nil {
			yy_buffer_stack = make([]*yy_buffer_state, 1)
			yy_buffer_stack[0] = yy_create_buffer(yyin, YY_BUF_SIZE)
			yy_buffer_stack_top = 0
		}
	}

	{
		//#line 13 "tst.l"

		//#line 696 "tst.c"

		var yy_act, yy_last_accepting_state, yy_last_accepting_cpos int
		for { /* loops until end-of-file is reached */

			yy_current_state := yy_start

			reader := yy_buffer_stack[yy_buffer_stack_top].yy_reader

			dont := false
			if dont {
				goto yy_match
			}
			if dont {
				goto yy_find_action
			}
			if dont {
				goto do_action
			}

		yy_match:
			yy_last_accepting_state = 0
			yy_last_accepting_cpos = 0
			for n := 1; true; n++ {
				var curbyte int
				bytes, err := reader.Peek(n)
				if err == nil {
					curbyte = int(bytes[n-1])
				} else {
					if err.Error() != "EOF" {
						log.Fatal(err)
					}
					curbyte = YY_END_OF_BUFFER_CHAR
				}
				yy_c := int(yy_ec[curbyte])
				if yy_accept[yy_current_state] != 0 {
					yy_last_accepting_state = yy_current_state
					yy_last_accepting_cpos = n - 1
					if i := len(bytes); yy_last_accepting_cpos > i {
						yy_last_accepting_cpos = i
					}
				}
				for yy_chk[yy_base[yy_current_state]+yy_c] != yy_current_state {
					yy_current_state = yy_def[yy_current_state]
					if yy_current_state >= 7 {
						yy_c = int(yy_meta[yy_c])
					}
				}
				yy_current_state = int(yy_nxt[yy_base[yy_current_state]+yy_c])
				if yy_current_state == 6 {
					break
				}
			}
			if yy_last_accepting_cpos > 0 {
				b := make([]byte, yy_last_accepting_cpos)
				reader.Read(b)
				yytext = string(b)
			} else {
				yytext = ""
			}
			fmt.Printf("\n%q\n", yytext)
			yy_current_state = yy_last_accepting_state

		yy_find_action:
			yy_act = yy_accept[yy_current_state]

		do_action: /* This label is used only to access EOF actions. */

			switch yy_act { /* beginning of action switch */
			case 0: /* must back up */
				fmt.Println("case 0")
				//yy_cp = yy_last_accepting_cpos
				yy_current_state = yy_last_accepting_state
				goto yy_find_action
			case 1:
				fmt.Println("case 1")
				//YY_RULE_SETUP
				//#line 15 "tst.l"
				yyout.WriteString("Go")
			case 2:
				fmt.Println("case 2")
				//YY_RULE_SETUP
				//#line 17 "tst.l"
				yyout.WriteString(yytext)
				//#line 759 "tst.c"
			case YY_STATE_EOF(INITIAL):
				fmt.Println("case YY_STATE_EOF(INITIAL)")
				return
			case YY_END_OF_BUFFER:
				fmt.Println("case YY_END_OF_BUFFER\n")
				return
			default:
				log.Fatalln("fatal flex scanner internal error--no action found:", yy_act)
			} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */

} /* end of yylex */

const YY_NUM_RULES = 2
const YY_END_OF_BUFFER = 3

/* This struct is not used in this scanner,
   but its presence is necessary. */
//struct yy_trans_info
//	{
//	flex_int32_t yy_verify;
//	flex_int32_t yy_nxt;
//	};
var yy_accept = [7]int{
	0,
	0, 0, 3, 2, 1, 0,
}

var yy_ec = [256]byte{0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var yy_meta = [3]byte{
	0,
	1, 1,
}

var yy_base = [7]int{
	0,
	0, 0, 3, 4, 4, 4,
}

var yy_def = [7]int{
	0,
	6, 1, 6, 6, 6, 0,
}

var yy_nxt = [7]int{
	0,
	4, 5, 6, 3, 6, 6,
}

var yy_chk = [7]int{
	0,
	1, 1, 3, 6, 6, 6,
}

func main() {
	yylex()
}
