// START OF SKELL ------------------------------------------------------
// A lexical scanner generated by flexgo

%#  Macros for preproc stage.
m4preproc_changecom

%# Macros for runtime processing stage.
m4_changecom
m4_changequote
m4_changequote([[, ]])

// [1.0] the user's section 1 definitions and yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here
%% [1.0] the user's section 1 definitions and yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here
// SKEL ----------------------------------------------------------------

// [1.5] DFA------------------------------------------------------------
%% [1.5] DFA
// SKEL ----------------------------------------------------------------

// [2.0] code to fiddle yytext and yyleng for yymore() goes here -------
%% [2.0] code to fiddle yytext and yyleng for yymore() goes here
// SKEL ----------------------------------------------------------------

// [3.0] code to copy yytext_ptr to yytext[] goes here, if %array ------
%% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array
// SKEL ----------------------------------------------------------------

// [4.0] data tables for the DFA go here -------------------------------
%% [4.0] data tables for the DFA go here
// SKEL ----------------------------------------------------------------

// [5.0] fread()/read() definition of YY_INPUT goes here ---------------
%% [5.0] fread()/read() definition of YY_INPUT goes here
// SKEL ----------------------------------------------------------------

// [6.0] YY_RULE_SETUP definition goes here ----------------------------
%% [6.0] YY_RULE_SETUP definition goes here
// SKEL ----------------------------------------------------------------

func YYlex() {
	if !yy_init {
		yy_init = true

		// #ifdef YY_USER_INIT
		// YY_USER_INIT
		// #endif

		if yy_start == 0 {
			yy_start = 1 // first start state
		}

		if YYin == nil {
			YYin = os.Stdin
		}

		if YYout == nil {
			YYout = os.Stdout
		}

		if yy_buffer_stack == nil {
			yy_buffer_stack = make([]*yy_buffer_state, 1)
			yy_buffer_stack[0] = yy_create_buffer(YYin)
			yy_buffer_stack_top = 0
		}
	}

	{
// [7.0] user's declarations go here -----------------------------------
%% [7.0] user's declarations go here
// SKEL ----------------------------------------------------------------

		var yy_act, yy_last_accepting_state, yy_last_accepting_cpos int
		for yy_running = true; yy_running; { // loops until YYterminate()
			var bytes []byte
			var unused int

			buffer := yy_buffer_stack[yy_buffer_stack_top]

			var yy_current_state int
			dont := false
			if dont {
				goto yy_match
			}
			if dont {
				goto yy_find_action
			}
			if dont {
				goto do_action
			}
// [8.0] yymore()-related code goes here -------------------------------
%% [8.0] yymore()-related code goes here
// SKEL ----------------------------------------------------------------

// [9.0] code to set up and find next match goes here ------------------
%% [9.0] code to set up and find next match goes here
// SKEL ----------------------------------------------------------------

yy_find_action:
// [10.0] code to find the action number goes here ---------------------
%% [10.0] code to find the action number goes here
// SKEL ----------------------------------------------------------------

// [11.0] code for yylineno update goes here ---------------------------
%% [11.0] code for yylineno update goes here
// SKEL ----------------------------------------------------------------

do_action:     // This label is used only to access EOF actions.

// [12.0] debug code goes here -----------------------------------------
%% [12.0] debug code goes here
// SKEL ----------------------------------------------------------------

			switch yy_act { // beginning of action switch
// [13.0] actions go here ----------------------------------------------
%% [13.0] actions go here
// SKEL ----------------------------------------------------------------

			case YY_END_OF_BUFFER:
				//fmt.Println("case YY_END_OF_BUFFER\n")

				// Amount of text matched not including the EOB char.
				// yy_amount_of_matched_text := len(bytes)

				// Undo the effects of YY_DO_BEFORE_ACTION.
				//YY_RESTORE_YY_MORE_OFFSET

				if buffer.yy_buffer_status == YY_BUFFER_NEW {
					// We're scanning a new file or input source.  It's
					// possible that this happened because the user
					// just pointed yyin at a new source and called
					// yylex().  If so, then we have to assure
					// consistency between YY_CURRENT_BUFFER and our
					// globals.  Here is the right place to do so, because
					// this is the first action (other than possibly a
					// back-up) that will match for the new input source.
					buffer.yy_buffer_status = YY_BUFFER_NORMAL
					if buffer.yy_file != yyin {
						buffer.yy_file = yyin
						buffer.yy_reader = bufio.NewReaderSize(yyin, buffer.yy_buf_size)
					}
				}

				// Note that here we test for yy_c_buf_p "<=" to the position
				// of the first EOB in the buffer, since yy_c_buf_p will
				// already have been incremented past the NUL character
				// (since all states make transitions on EOB to the
				// end-of-buffer state).  Contrast this with the test
				// in input().
				if len(bytes) > 0 {
					// This was really a NUL.
					var yy_next_state int

					// (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

					yy_current_state, yy_last_accepting_state = yy_get_previous_state(yy_last_accepting_state, bytes)

					// Okay, we're now positioned to make the NUL
					// transition.  We couldn't have
					// yy_get_previous_state() go ahead and do it
					// for us because it doesn't know how to deal
					// with the possibility of jamming (and we don't
					// want to build jamming into it because then it
					// will run more slowly).

					var ac bool
					yy_next_state, yy_last_accepting_state, ac = yy_try_NUL_trans(yy_current_state, yy_last_accepting_state)

					// yy_bp = (yytext_ptr) + YY_MORE_ADJ;

					if yy_next_state != 0 {
						// Consume the NUL.
						buffer.Read(unused)
						yy_current_state = yy_next_state
						goto yy_match
					} else {

// [14.0] code to do back-up for compressed tables and set up yy_cp goes here
%% [14.0] code to do back-up for compressed tables and set up yy_cp goes here
// SKEL ----------------------------------------------------------------
						goto yy_find_action
					}

				} else {

					yy_did_buffer_switch_on_eof := false

					if yywrap() {
						// Note: because we've taken care in
						// yy_get_next_buffer() to have set up
						// yytext, we can now set up
						// yy_c_buf_p so that if some total
						// hoser (like flex itself) wants to
						// call the scanner after we return the
						// YY_NULL, it'll still work - another
						// YY_NULL will get returned.
						//(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ

						yy_act = YY_STATE_EOF(YY_START())
						goto do_action
					} else {
						if !yy_did_buffer_switch_on_eof {
							YY_NEW_FILE()
						}
					}
				}

			default:
				log.Fatalln("fatal flex scanner internal error--no action found:", yy_act)
			} // end of action switch
		} // end of scanning one token
	} // end of user's declarations

} // end of YYlex

// [15.0] code to get the start state into yy_current_state goes here --
%% [15.0] code to get the start state into yy_current_state goes here
// SKEL ----------------------------------------------------------------

// [16.0] code to find the next state goes here ------------------------
%% [16.0] code to find the next state goes here
// SKEL ----------------------------------------------------------------

// [17.0] code to find the next state, and perhaps do backing up, goes here
%% [17.0] code to find the next state, and perhaps do backing up, goes here
// SKEL ----------------------------------------------------------------

// [18.0] update yylineno here -----------------------------------------
%% [18.0] update yylineno here
// SKEL ----------------------------------------------------------------

// [19.0] update BOL and yylineno --------------------------------------
%% [19.0] update BOL and yylineno
// SKEL ----------------------------------------------------------------


func YYmain(filenames ...string) {

	if len(filenames) == 0 {
		YYin = os.Stdin
 	} else {
                r, err := os.Open(filenames[0])
                if err != nil {
                        log.Fatal(err)
                }
                YYin = r // YYrestart(r) ???
                YYwrap = func() bool {
                        r.Close()
                        filenames = filenames[1:]
                        if len(filenames) == 0 {
                                return true
                        }
                        r, err = os.Open(filenames[0])
                        YYrestart(r)
                        if err != nil {
                                log.Fatal(err)
                        }
                        return false
                }
        }

        YYlex()
}
// END OF SKELL --------------------------------------------------------
